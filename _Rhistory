??solve
help(solve)
help.start()
example(topic)
example(solve)
rnorm
install.packages("knitr")
library(knitr)
search()
install.packages("devtools")
library(devtools)
find_rtools()
a = matrix(1:6,2)
a
numeric(a)
as.numeric(a)
a
as.numeric(a)
?as.numeric
is.numeric(a)
a$dim
a$nrow
arguments(a)
args(a)
?solve
rand(3)
noise(5,1,2)
rnorm(5,1,2)
rnorm(5,4,4)
matrix = rnorm(5,4,4)
det(matrix)
?det
matrix = rnorm(5,4,4)
matrix = rnorm(5,0,1)
matrix
m <- matrix(rnorm(9,0,1),nrow=3,ncol=3)
m
det(m)
det(m)
solve(m)
source("makeCacheMatrix.R")
setwd("C:/Users/Antolin/Google Drive/Online Courses/DataScienceCourses/RProgramming/ProgAssign2")
source("makeCacheMatrix.R")
source("cacheSolve.R")
cacheSolve(m)
myVector <- c(1,0,5)
mean(myVector)
myVector
is.vector(myVector)
source("makeVector.R")
source("cachemean.R")
cachemean(myVector)
cachemean(myVector)
cachemean(myVector)
cachemean(myVector)
source("makeCacheMatrix.R")
source("cacheSolve.R")
m <- makeCacheMatrix()
m$set( matrix(c(1,0,5,2,1,6,3,4,0), nrow=3, ncol=3, byrow=TRUE))
m$get()
cacheSolve(m)
cacheSolve(m)
m$get() %*% cacheSolve(m)
all.equal( diag(3), m$get() %*% cacheSolve(m))
m1 <- cacheSolve(m)
m$set( matrix(c(0,2,2,0),2,2))
all.equal( diag(2), m$get() %*% cacheSolve(m))
source("makeCacheMatrix.R")
source("cacheSolve.R")
m <- makeCacheMatrix()
source("makeCacheMatrix.R")
source("cacheSolve.R")
## create sourcable object
m <- makeCacheMatrix()
m$set( matrix(c(1,0,5,2,1,6,3,4,0), nrow=3, ncol=3, byrow=TRUE))
m$get()
cacheSolve(m)
cacheSolve(m)
m$get() %*% cacheSolve(m)
all.equal( diag(3), m$get() %*% cacheSolve(m))
m1 <- cacheSolve(m)
m$set( matrix(c(0,2,2,0),2,2))
all.equal( diag(2), m$get() %*% cacheSolve(m))
